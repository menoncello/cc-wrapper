/**
 * Test Setup Helper
 * Provides consistent setup and teardown for all test files
 */

import { setupPrismaMock, cleanupPrismaMock, clearAllMocks, resetAllMocks } from './prisma.mock';
import { setupCryptoMock, cleanupCryptoMock } from './crypto.mock';
import { setupServiceMocks, cleanupServiceMocks, clearAllServiceMocks } from './services.mock';

/**
 * Setup all mocks for testing
 */
export const setupTestMocks = () => {
  setupPrismaMock();
  setupCryptoMock();
  setupServiceMocks();
};

/**
 * Cleanup all mocks after testing
 */
export const cleanupTestMocks = () => {
  cleanupPrismaMock();
  cleanupCryptoMock();
  cleanupServiceMocks();
};

/**
 * Reset all mocks between tests
 */
export const resetTestMocks = () => {
  clearAllMocks();
  clearAllServiceMocks();
};

/**
 * Complete reset of all mocks (use with caution)
 */
export const hardResetTestMocks = () => {
  resetAllMocks();
  resetTestMocks();
};

/**
 * Create a test environment setup function
 */
export const createTestEnvironment = () => {
  beforeAll(() => {
    setupTestMocks();
  });

  afterAll(() => {
    cleanupTestMocks();
  });

  beforeEach(() => {
    resetTestMocks();
  });
};

/**
 * Default mock data for common test scenarios
 */
export const createMockWorkspaceState = () => ({
  terminalState: [
    {
      id: '1',
      command: 'ls -la',
      output: 'file1.txt\nfile2.txt\nfile3.txt',
      timestamp: '2025-01-01T10:00:00Z',
      workingDirectory: '/home/user'
    }
  ],
  browserTabs: [
    {
      id: '1',
      url: 'https://example.com',
      title: 'Example Page',
      isActive: true,
      lastAccessed: '2025-01-01T10:00:00Z'
    }
  ],
  aiConversations: [
    {
      id: '1',
      title: 'Test Conversation',
      messages: [
        {
          id: '1',
          role: 'user',
          content: 'Hello, how are you?',
          timestamp: '2025-01-01T10:00:00Z'
        },
        {
          id: '2',
          role: 'assistant',
          content: 'I am doing well, thank you!',
          timestamp: '2025-01-01T10:01:00Z'
        }
      ],
      createdAt: '2025-01-01T09:00:00Z',
      updatedAt: '2025-01-01T10:01:00Z'
    }
  ],
  files: [
    {
      id: '1',
      path: '/home/user/test.txt',
      content: 'This is test file content',
      lastModified: '2025-01-01T10:00:00Z',
      size: 1024
    }
  ],
  metadata: {
    version: '1.0',
    createdAt: '2025-01-01T09:00:00Z',
    updatedAt: '2025-01-01T10:00:00Z',
    tags: ['test', 'example'],
    description: 'Test workspace state'
  }
});

export const createMockUser = () => ({
  id: 'test-user-id',
  email: 'test@example.com',
  name: 'Test User',
  createdAt: new Date(),
  updatedAt: new Date()
});

export const createMockWorkspace = () => ({
  id: 'test-workspace-id',
  name: 'Test Workspace',
  userId: 'test-user-id',
  description: 'Test workspace description',
  createdAt: new Date(),
  updatedAt: new Date()
});

export const createMockSession = () => ({
  id: 'test-session-id',
  name: 'Test Session',
  userId: 'test-user-id',
  workspaceId: 'test-workspace-id',
  workspaceState: createMockWorkspaceState(),
  encryptedState: 'encrypted-state-data',
  checksum: 'test-checksum',
  isActive: true,
  lastAccessedAt: new Date(),
  createdAt: new Date(),
  updatedAt: new Date()
});

export const createMockCheckpoint = () => ({
  id: 'test-checkpoint-id',
  name: 'Test Checkpoint',
  sessionId: 'test-session-id',
  workspaceState: createMockWorkspaceState(),
  encryptedState: 'encrypted-checkpoint-data',
  checksum: 'checkpoint-checksum',
  size: 2048,
  priority: 'medium',
  tags: ['test', 'checkpoint'],
  description: 'Test checkpoint description',
  isAutoGenerated: false,
  createdAt: new Date(),
  updatedAt: new Date()
});

export const createMockEncryptionKey = () => ({
  id: 'test-key-id',
  keyName: 'Test Key',
  userId: 'test-user-id',
  algorithm: 'AES-256-GCM',
  keySize: 256,
  salt: 'test-salt',
  iv: 'test-iv',
  encryptedKey: 'encrypted-key-data',
  isActive: true,
  createdAt: new Date(),
  expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days
  metadata: {
    version: '1.0',
    iterations: 210000
  }
});