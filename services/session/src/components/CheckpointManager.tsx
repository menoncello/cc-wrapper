// Session Checkpoint Manager Component
// React island for checkpoint management UI

import React, { useEffect,useState } from 'react';

// Types
interface Checkpoint {
  id: string;
  sessionId: string;
  name: string;
  description?: string;
  createdAt: string;
  compressedSize: number;
  uncompressedSize: number;
  tags: string[];
  priority: 'low' | 'medium' | 'high';
  isAutoGenerated: boolean;
  session?: {
    id: string;
    name: string;
    workspaceId: string;
  };
}

interface CheckpointListResponse {
  checkpoints: Checkpoint[];
  pagination: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
    totalPages: number;
  };
}

interface CreateCheckpointData {
  sessionId: string;
  name: string;
  description?: string;
  tags: string[];
  priority: 'low' | 'medium' | 'high';
  encryptData?: boolean;
  encryptionKey?: string;
  skipDuplicates?: boolean;
}

// Props
interface CheckpointManagerProps {
  sessionId?: string;
  onCreateCheckpoint?: (checkpoint: Checkpoint) => void;
  onRestoreCheckpoint?: (checkpoint: Checkpoint) => void;
  onDeleteCheckpoint?: (checkpointId: string) => void;
  className?: string;
}

const CheckpointManager: React.FC<CheckpointManagerProps> = ({
  sessionId,
  onCreateCheckpoint,
  onRestoreCheckpoint,
  onDeleteCheckpoint,
  className = ''
}) => {
  const [checkpoints, setCheckpoints] = useState<Checkpoint[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedCheckpoint, setSelectedCheckpoint] = useState<Checkpoint | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showRestoreModal, setShowRestoreModal] = useState(false);
  const [filter, setFilter] = useState({
    priority: '',
    tags: '',
    dateFrom: '',
    dateTo: ''
  });
  const [pagination, setPagination] = useState({
    limit: 20,
    offset: 0,
    total: 0
  });

  // Form states
  const [createForm, setCreateForm] = useState<CreateCheckpointData>({
    sessionId: sessionId || '',
    name: '',
    description: '',
    tags: [],
    priority: 'medium',
    encryptData: false,
    encryptionKey: '',
    skipDuplicates: false
  });

  const [restoreForm, setRestoreForm] = useState({
    encryptionKey: '',
    createBackup: false,
    backupName: ''
  });

  // Load checkpoints
  const loadCheckpoints = async () => {
    setLoading(true);
    setError(null);

    try {
      const params = new URLSearchParams({
        limit: pagination.limit.toString(),
        offset: pagination.offset.toString()
      });

      if (sessionId) {
        params.append('sessionId', sessionId);
      }

      if (filter.priority) {
        params.append('priority', filter.priority);
      }

      if (filter.tags) {
        params.append('tags', filter.tags);
      }

      if (filter.dateFrom) {
        params.append('dateFrom', filter.dateFrom);
      }

      if (filter.dateTo) {
        params.append('dateTo', filter.dateTo);
      }

      const response = await fetch(`/api/checkpoints/v1?${params}`);

      if (!response.ok) {
        throw new Error('Failed to load checkpoints');
      }

      const data = await response.json();
      setCheckpoints(data.data.checkpoints);
      setPagination(prev => ({
        ...prev,
        total: data.data.pagination.total
      }));
    } catch (error_) {
      setError(error_ instanceof Error ? error_.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  // Create checkpoint
  const handleCreateCheckpoint = async () => {
    if (!createForm.name) {
      setError('Checkpoint name is required');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Get current workspace state (this would come from your state management)
      const workspaceState = getCurrentWorkspaceState();

      const response = await fetch('/api/checkpoints/v1', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          ...createForm,
          sessionId: sessionId || createForm.sessionId,
          workspaceState
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create checkpoint');
      }

      const data = await response.json();
      setShowCreateModal(false);
      resetCreateForm();
      await loadCheckpoints();

      if (onCreateCheckpoint) {
        onCreateCheckpoint(data.data);
      }
    } catch (error_) {
      setError(error_ instanceof Error ? error_.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  // Restore checkpoint
  const handleRestoreCheckpoint = async () => {
    if (!selectedCheckpoint) {
return;
}

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/checkpoints/v1/${selectedCheckpoint.id}/restore`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(restoreForm)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to restore checkpoint');
      }

      const data = await response.json();
      setShowRestoreModal(false);
      resetRestoreForm();

      if (onRestoreCheckpoint) {
        onRestoreCheckpoint(selectedCheckpoint);
      }
    } catch (error_) {
      setError(error_ instanceof Error ? error_.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  // Delete checkpoint
  const handleDeleteCheckpoint = async (checkpointId: string) => {
    if (!confirm('Are you sure you want to delete this checkpoint?')) {
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/checkpoints/v1/${checkpointId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete checkpoint');
      }

      await loadCheckpoints();

      if (onDeleteCheckpoint) {
        onDeleteCheckpoint(checkpointId);
      }
    } catch (error_) {
      setError(error_ instanceof Error ? error_.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  // Helper functions
  const getCurrentWorkspaceState = () => {
    // This would integrate with your state management system
    // For now, return a mock structure
    return {
      terminalState: [],
      browserTabs: [],
      aiConversations: [],
      openFiles: [],
      workspaceConfig: {},
      metadata: {
        createdAt: new Date(),
        updatedAt: new Date()
      }
    };
  };

  const resetCreateForm = () => {
    setCreateForm({
      sessionId: sessionId || '',
      name: '',
      description: '',
      tags: [],
      priority: 'medium',
      encryptData: false,
      encryptionKey: '',
      skipDuplicates: false
    });
  };

  const resetRestoreForm = () => {
    setRestoreForm({
      encryptionKey: '',
      createBackup: false,
      backupName: ''
    });
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) {
return '0 B';
}
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2))  } ${  sizes[i]}`;
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleString();
  };

  // Effects
  useEffect(() => {
    loadCheckpoints();
  }, [sessionId, filter, pagination.offset]);

  return (
    <div className={`checkpoint-manager ${className}`}>
      <div className="checkpoint-manager__header">
        <h2>Session Checkpoints</h2>
        <div className="checkpoint-manager__actions">
          <button
            className="btn btn-primary"
            onClick={() => setShowCreateModal(true)}
            disabled={loading}
          >
            Create Checkpoint
          </button>
          <button
            className="btn btn-secondary"
            onClick={loadCheckpoints}
            disabled={loading}
          >
            Refresh
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="checkpoint-manager__filters">
        <div className="form-group">
          <label>Priority</label>
          <select
            value={filter.priority}
            onChange={(e) => setFilter(prev => ({ ...prev, priority: e.target.value }))}
          >
            <option value="">All</option>
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>
        <div className="form-group">
          <label>Tags</label>
          <input
            type="text"
            placeholder="Enter tags (comma separated)"
            value={filter.tags}
            onChange={(e) => setFilter(prev => ({ ...prev, tags: e.target.value }))}
          />
        </div>
        <div className="form-group">
          <label>Date From</label>
          <input
            type="date"
            value={filter.dateFrom}
            onChange={(e) => setFilter(prev => ({ ...prev, dateFrom: e.target.value }))}
          />
        </div>
        <div className="form-group">
          <label>Date To</label>
          <input
            type="date"
            value={filter.dateTo}
            onChange={(e) => setFilter(prev => ({ ...prev, dateTo: e.target.value }))}
          />
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="checkpoint-manager__error">
          <span className="error-message">{error}</span>
          <button onClick={() => setError(null)} className="close-btn">Ã—</button>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="checkpoint-manager__loading">
          <div className="spinner"></div>
          <span>Loading checkpoints...</span>
        </div>
      )}

      {/* Checkpoints List */}
      {!loading && (
        <div className="checkpoint-manager__list">
          {checkpoints.length === 0 ? (
            <div className="checkpoint-manager__empty">
              <p>No checkpoints found.</p>
              <button
                className="btn btn-primary"
                onClick={() => setShowCreateModal(true)}
              >
                Create your first checkpoint
              </button>
            </div>
          ) : (
            <div className="checkpoint-list">
              {checkpoints.map((checkpoint) => (
                <div
                  key={checkpoint.id}
                  className={`checkpoint-card ${selectedCheckpoint?.id === checkpoint.id ? 'selected' : ''}`}
                  onClick={() => setSelectedCheckpoint(checkpoint)}
                >
                  <div className="checkpoint-card__header">
                    <h3 className="checkpoint-card__name">{checkpoint.name}</h3>
                    <div className="checkpoint-card__priority">
                      <span className={`priority-badge priority-${checkpoint.priority}`}>
                        {checkpoint.priority}
                      </span>
                      {checkpoint.isAutoGenerated && (
                        <span className="auto-badge">Auto</span>
                      )}
                    </div>
                  </div>

                  {checkpoint.description && (
                    <p className="checkpoint-card__description">{checkpoint.description}</p>
                  )}

                  <div className="checkpoint-card__meta">
                    <div className="checkpoint-card__info">
                      <span className="info-item">
                        <i className="icon-calendar"></i>
                        {formatDate(checkpoint.createdAt)}
                      </span>
                      <span className="info-item">
                        <i className="icon-database"></i>
                        {formatFileSize(checkpoint.compressedSize)}
                      </span>
                      {checkpoint.compressedSize !== checkpoint.uncompressedSize && (
                        <span className="info-item">
                          <i className="icon-compress"></i>
                          {((1 - checkpoint.compressedSize / checkpoint.uncompressedSize) * 100).toFixed(1)}% compressed
                        </span>
                      )}
                    </div>
                  </div>

                  {checkpoint.tags.length > 0 && (
                    <div className="checkpoint-card__tags">
                      {checkpoint.tags.map((tag, index) => (
                        <span key={index} className="tag">{tag}</span>
                      ))}
                    </div>
                  )}

                  <div className="checkpoint-card__actions">
                    <button
                      className="btn btn-primary btn-sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedCheckpoint(checkpoint);
                        setShowRestoreModal(true);
                      }}
                    >
                      Restore
                    </button>
                    <button
                      className="btn btn-secondary btn-sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteCheckpoint(checkpoint.id);
                      }}
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          {checkpoints.length > 0 && (
            <div className="checkpoint-manager__pagination">
              <div className="pagination-info">
                Showing {Math.min(pagination.offset + 1, pagination.total)}-
                {Math.min(pagination.offset + pagination.limit, pagination.total)} of {pagination.total} checkpoints
              </div>
              <div className="pagination-controls">
                <button
                  className="btn btn-secondary"
                  onClick={() => setPagination(prev => ({ ...prev, offset: Math.max(0, prev.offset - prev.limit) }))}
                  disabled={pagination.offset === 0}
                >
                  Previous
                </button>
                <button
                  className="btn btn-secondary"
                  onClick={() => setPagination(prev => ({ ...prev, offset: prev.offset + prev.limit }))}
                  disabled={pagination.offset + pagination.limit >= pagination.total}
                >
                  Next
                </button>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Create Checkpoint Modal */}
      {showCreateModal && (
        <div className="modal">
          <div className="modal__content">
            <div className="modal__header">
              <h3>Create New Checkpoint</h3>
              <button
                className="modal__close"
                onClick={() => setShowCreateModal(false)}
              >
                Ã—
              </button>
            </div>
            <div className="modal__body">
              <div className="form-group">
                <label>Session ID</label>
                <input
                  type="text"
                  value={createForm.sessionId}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, sessionId: e.target.value }))}
                  placeholder="Session ID"
                  disabled={!!sessionId}
                />
              </div>
              <div className="form-group">
                <label>Name *</label>
                <input
                  type="text"
                  value={createForm.name}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="Checkpoint name"
                  maxLength={100}
                />
              </div>
              <div className="form-group">
                <label>Description</label>
                <textarea
                  value={createForm.description}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Optional description"
                  maxLength={500}
                  rows={3}
                />
              </div>
              <div className="form-group">
                <label>Priority</label>
                <select
                  value={createForm.priority}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, priority: e.target.value as any }))}
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                </select>
              </div>
              <div className="form-group">
                <label>Tags</label>
                <input
                  type="text"
                  value={createForm.tags.join(', ')}
                  onChange={(e) => setCreateForm(prev => ({
                    ...prev,
                    tags: e.target.value.split(',').map(tag => tag.trim()).filter(Boolean)
                  }))}
                  placeholder="Enter tags (comma separated)"
                />
              </div>
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={createForm.encryptData}
                    onChange={(e) => setCreateForm(prev => ({ ...prev, encryptData: e.target.checked }))}
                  />
                  Encrypt checkpoint data
                </label>
              </div>
              {createForm.encryptData && (
                <div className="form-group">
                  <label>Encryption Key</label>
                  <input
                    type="password"
                    value={createForm.encryptionKey}
                    onChange={(e) => setCreateForm(prev => ({ ...prev, encryptionKey: e.target.value }))}
                    placeholder="Enter encryption key"
                  />
                </div>
              )}
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={createForm.skipDuplicates}
                    onChange={(e) => setCreateForm(prev => ({ ...prev, skipDuplicates: e.target.checked }))}
                  />
                  Skip if checkpoint with same name exists
                </label>
              </div>
            </div>
            <div className="modal__footer">
              <button
                className="btn btn-secondary"
                onClick={() => setShowCreateModal(false)}
                disabled={loading}
              >
                Cancel
              </button>
              <button
                className="btn btn-primary"
                onClick={handleCreateCheckpoint}
                disabled={loading || !createForm.name}
              >
                {loading ? 'Creating...' : 'Create Checkpoint'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Restore Checkpoint Modal */}
      {showRestoreModal && selectedCheckpoint && (
        <div className="modal">
          <div className="modal__content">
            <div className="modal__header">
              <h3>Restore Checkpoint</h3>
              <button
                className="modal__close"
                onClick={() => setShowRestoreModal(false)}
              >
                Ã—
              </button>
            </div>
            <div className="modal__body">
              <div className="checkpoint-preview">
                <h4>{selectedCheckpoint.name}</h4>
                {selectedCheckpoint.description && (
                  <p>{selectedCheckpoint.description}</p>
                )}
                <div className="checkpoint-meta">
                  <span>Created: {formatDate(selectedCheckpoint.createdAt)}</span>
                  <span>Size: {formatFileSize(selectedCheckpoint.compressedSize)}</span>
                </div>
              </div>

              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={restoreForm.createBackup}
                    onChange={(e) => setRestoreForm(prev => ({ ...prev, createBackup: e.target.checked }))}
                  />
                  Create backup before restoring
                </label>
              </div>

              {restoreForm.createBackup && (
                <div className="form-group">
                  <label>Backup Name</label>
                  <input
                    type="text"
                    value={restoreForm.backupName}
                    onChange={(e) => setRestoreForm(prev => ({ ...prev, backupName: e.target.value }))}
                    placeholder="Optional backup name"
                  />
                </div>
              )}

              <div className="form-group">
                <label>Encryption Key (if checkpoint is encrypted)</label>
                <input
                  type="password"
                  value={restoreForm.encryptionKey}
                  onChange={(e) => setRestoreForm(prev => ({ ...prev, encryptionKey: e.target.value }))}
                  placeholder="Enter encryption key if needed"
                />
              </div>

              <div className="warning-message">
                <strong>Warning:</strong> Restoring from a checkpoint will overwrite your current session state.
              </div>
            </div>
            <div className="modal__footer">
              <button
                className="btn btn-secondary"
                onClick={() => setShowRestoreModal(false)}
                disabled={loading}
              >
                Cancel
              </button>
              <button
                className="btn btn-primary"
                onClick={handleRestoreCheckpoint}
                disabled={loading}
              >
                {loading ? 'Restoring...' : 'Restore Checkpoint'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CheckpointManager;