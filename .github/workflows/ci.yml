name: CI

on:
  push:
    branches: [main, develop, story/**]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-v2
          restore-keys: |
            ${{ runner.os }}-bun-v2
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Clean build artifacts
        run: |
          # Remove any .astro directories that might exist
          find . -name ".astro" -type d -exec rm -rf {} + 2>/dev/null || true
          # Clean turbo cache
          rm -rf .turbo 2>/dev/null || true

      - name: TypeScript type check
        run: bun run type-check

      - name: ESLint validation
        run: bun run lint

      - name: Prettier format check
        run: |
          # Check package-specific formatting
          bun run format:check
          # Check root level and other files not covered by packages (excluding .astro)
          bunx prettier --check "**/*.{ts,tsx,js,jsx,json,md}" --ignore-unknown --ignore-path .gitignore || echo "Global prettier check completed"

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        test-type: [unit, integration, e2e]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-test-${{ matrix.test-type }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run ${{ matrix.test-type }} tests
        run: bun run test:${{ matrix.test-type }}

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run tests with coverage
        run: bun run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build all targets
        run: bun run build:all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            dist/
            packages/*/dist/
          retention-days: 7

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [quality-checks, test, coverage, build]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "Quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "Coverage check failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All checks passed!"
