name: Security Scanning

on:
  push:
    branches: [main, develop, story/**]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended, security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

      - name: Run npm audit (security vulnerabilities)
        run: |
          echo "🔍 Running npm audit for security vulnerabilities..."
          bun audit || true  # Don't fail the build, but capture results

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --org=ccwrapper --project-name=cc-wrapper

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/xss
            p/sql-injection
            p/command-injection
            p/cryptography
            p/owasp-top-ten
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run ESLint Security Rules
        run: |
          bunx eslint . --ext .ts,.tsx,.js,.jsx \
            --config .github/security/.eslintrc.security.js \
            --format json \
            --output-file eslint-security-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-results
          path: |
            eslint-security-report.json
            .sarif
            snyk-results.json
          retention-days: 30

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Run dependency check
        run: |
          echo "🔍 Checking for known vulnerable dependencies..."
          bun install

          # Check for known vulnerabilities
          bun audit || true

          # Generate dependency tree
          bun pm ls > dependency-tree.txt

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'cc-wrapper'
          path: '.'
          format: 'HTML'
          out: 'dependency-check-reports'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: dependency-check-reports/
          retention-days: 30

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          GITLEAKS_CONFIG: ${{ github.workspace }}/.gitleaks.toml

      - name: Run GitGuardian Security Scan
        uses: GitGuardian/ggshield-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: -v

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: cc-wrapper:security-scan
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cc-wrapper:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'cc-wrapper:security-scan'
          format: 'sarif'
          output-file: 'grype-results.sarif'

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            grype-results.sarif
          retention-days: 30

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    services:
      app:
        image: cc-wrapper:latest
        ports:
          - 3000:3000
        options: >-
          --health-cmd "curl -f http://localhost:3000/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.github/security/zap-rules.tsv'
          cmd_options: '-a'

      - name: Run Nuclei Vulnerability Scanner
        uses: projectdiscovery/nuclei-action@v3
        with:
          target: http://localhost:3000
          templates: 'cves,vulnerabilities,misconfiguration'
          severity: 'high,critical'

      - name: Run Nmap Security Scan
        uses: nmap/nmap-action@v1
        with:
          arguments: '-sV -sC -p 3000 localhost'

      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-results
          path: |
            report.html
            report.json
            nuclei-results.txt
          retention-days: 30

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [sast, dependency-check, secrets-scan, container-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate security summary
        run: |
          echo "# Security Scanning Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Workflow:** ${{ github.workflow }}" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          # Add results from each security scan
          echo "## Static Application Security Testing (SAST)" >> security-summary.md
          echo "**Status:** ${{ needs.sast.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Dependency Security Check" >> security-summary.md
          echo "**Status:** ${{ needs.dependency-check.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Secrets Scanning" >> security-summary.md
          echo "**Status:** ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Container Security Scan" >> security-summary.md
          echo "**Status:** ${{ needs.container-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md

          # Count issues if possible
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0

          echo "### Issue Summary" >> security-summary.md
          echo "- Critical Issues: $CRITICAL_ISSUES" >> security-summary.md
          echo "- High Issues: $HIGH_ISSUES" >> security-summary.md
          echo "" >> security-summary.md

      - name: Comment PR with security results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'security-summary.md';

            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');

              const comment = `## 🔒 Security Scan Results

              ${summary}

              **Note:** Security scans help identify potential vulnerabilities. Review the artifacts for detailed findings.
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Security gate check
        run: |
          echo "Checking security gates..."

          SECURITY_FAILURES=false

          # Check if any critical security scan failed
          if [ "${{ needs.sast.result }}" = "failure" ]; then
            echo "❌ SAST failed"
            SECURITY_FAILURES=true
          fi

          if [ "${{ needs.secrets-scan.result }}" = "failure" ]; then
            echo "❌ Secrets scanning failed"
            SECURITY_FAILURES=true
          fi

          if [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "❌ Container scanning failed"
            SECURITY_FAILURES=true
          fi

          if [ "$SECURITY_FAILURES" = true ]; then
            echo "❌ Security gates failed - critical issues found"
            exit 1
          else
            echo "✅ Security gates passed"
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
