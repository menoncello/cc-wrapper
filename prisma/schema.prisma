// This is a minimal schema for test purposes only
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userEncryptionKeys UserEncryptionKey[]
  workspaceSessions  WorkspaceSession[]

  @@map("users")
}

model UserEncryptionKey {
  id                String   @id @default(cuid())
  keyName           String
  userId            String
  algorithm         String
  keySize           Int
  salt              String
  iv                String
  encryptedKey      String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  metadata          Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_encryption_keys")
}

model WorkspaceSession {
  id               String   @id @default(cuid())
  name             String
  userId           String
  workspaceId      String
  workspaceState   Json
  encryptedState   String
  checksum         String
  isActive         Boolean  @default(true)
  lastAccessedAt   DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkpoints    SessionCheckpoint[]
  metadata       SessionMetadata[]

  @@map("workspace_sessions")
}

model SessionCheckpoint {
  id                String   @id @default(cuid())
  name              String
  sessionId         String
  workspaceState    Json
  encryptedState    String
  checksum          String
  size              Int
  priority          String   @default("medium")
  tags              String   @default("")
  description       String?
  isAutoGenerated   Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  session WorkspaceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_checkpoints")
}

model SessionMetadata {
  id          String   @id @default(cuid())
  sessionId   String
  key         String
  value       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session WorkspaceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_metadata")
}