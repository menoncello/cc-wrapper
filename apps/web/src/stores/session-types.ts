/**
 * Type definitions for session management
 * These types define the structure of sessions, checkpoints, and related data
 */

export interface WorkspaceState {
  terminalState: unknown[];
  browserTabs: unknown[];
  aiConversations: unknown[];
  openFiles: unknown[];
  workspaceConfig?: Record<string, unknown>;
  metadata?: Record<string, unknown>;
}

export interface Session {
  id: string;
  userId: string;
  workspaceId: string;
  name: string;
  isActive: boolean;
  lastSavedAt: string;
  expiresAt?: string;
  createdAt: string;
  checkpointCount: number;
  totalSize: number;
}

export interface Checkpoint {
  id: string;
  sessionId: string;
  name: string;
  description?: string;
  createdAt: string;
  compressedSize: number;
  uncompressedSize: number;
  tags: string[];
  priority: CheckpointPriority;
  isAutoGenerated: boolean;
  metadata?: Record<string, unknown>;
  session?: {
    id: string;
    name: string;
    workspaceId: string;
  };
}

export interface CheckpointFilter {
  sessionId?: string;
  tags?: string[];
  dateFrom?: Date;
  dateTo?: Date;
  priority?: CheckpointPriority;
  isAutoGenerated?: boolean;
  limit?: number;
  offset?: number;
  sortBy?: CheckpointSortField;
  sortOrder?: SortOrder;
}

export interface SessionState {
  // Current session state
  currentSession: Session | null;
  workspaceState: WorkspaceState | null;
  isDirty: boolean;
  lastSaved: Date | null;
  autoSaveEnabled: boolean;
  autoSaveInterval: number;

  // Checkpoints
  checkpoints: Checkpoint[];
  checkpointFilter: CheckpointFilter;
  isLoadingCheckpoints: boolean;

  // UI state
  isCreatingCheckpoint: boolean;
  isRestoringCheckpoint: boolean;
  checkpointName: string;
  checkpointDescription: string;
  checkpointTags: string[];
  checkpointPriority: CheckpointPriority;

  // Actions
  setCurrentSession: (session: Session | null) => void;
  setWorkspaceState: (state: WorkspaceState | null) => void;
  updateWorkspaceState: (updates: Partial<WorkspaceState>) => void;
  setDirty: (dirty: boolean) => void;
  setAutoSave: (enabled: boolean, interval?: number) => void;
  createCheckpoint: (name: string, options?: CheckpointCreateOptions) => Promise<string>;
  loadCheckpoints: (filter?: CheckpointFilter) => Promise<void>;
  restoreCheckpoint: (checkpointId: string, options?: CheckpointRestoreOptions) => Promise<boolean>;
  deleteCheckpoint: (checkpointId: string) => Promise<void>;
  updateCheckpointMetadata: (
    checkpointId: string,
    updates: CheckpointMetadataUpdates
  ) => Promise<void>;
  saveSession: (options?: SessionSaveOptions) => Promise<boolean>;
  restoreSession: (sessionId: string, options?: SessionRestoreOptions) => Promise<boolean>;
  createNewSession: (config: NewSessionConfig) => Promise<string>;
  startAutoSave: () => void;
  stopAutoSave: () => void;
  setCheckpointForm: (data: Partial<CheckpointFormData>) => void;
  resetCheckpointForm: () => void;
  clearSession: () => void;
}

// Type aliases for better type safety
export type CheckpointPriority = 'low' | 'medium' | 'high';
export type SortOrder = 'asc' | 'desc';
export type CheckpointSortField = 'createdAt' | 'name' | 'size' | 'priority' | string;

// Action parameter types
export interface CheckpointCreateOptions {
  description?: string;
  tags?: string[];
  priority?: CheckpointPriority;
  encryptData?: boolean;
  encryptionKey?: string;
}

export interface CheckpointRestoreOptions {
  createBackup?: boolean;
  backupName?: string;
  encryptionKey?: string;
}

export interface CheckpointMetadataUpdates {
  name?: string;
  description?: string;
  tags?: string[];
  priority?: CheckpointPriority;
}

export interface SessionSaveOptions {
  force?: boolean;
}

export interface SessionRestoreOptions {
  encryptionKey?: string;
  createBackup?: boolean;
}

export interface NewSessionConfig {
  userId: string;
  workspaceId: string;
  name: string;
  workspaceState: WorkspaceState;
  encryptionKey?: string;
}

export interface CheckpointFormData {
  name?: string;
  description?: string;
  tags?: string[];
  priority?: CheckpointPriority;
}

// API Response types
export interface ApiResponse<T = unknown> {
  data: T;
  error?: string;
}

export interface CheckpointsResponse {
  checkpoints: Checkpoint[];
}

export interface SessionRestoreResponse {
  session: Session;
  workspaceState: WorkspaceState;
}

// Constants
export const DEFAULT_AUTO_SAVE_INTERVAL = 30000; // 30 seconds
export const DEFAULT_CHECKPOINT_LIMIT = 20;
export const DEFAULT_CHECKPOINT_SORT_BY: CheckpointSortField = 'createdAt';
export const DEFAULT_CHECKPOINT_SORT_ORDER: SortOrder = 'desc';
export const DEFAULT_CHECKPOINT_PRIORITY: CheckpointPriority = 'medium';
