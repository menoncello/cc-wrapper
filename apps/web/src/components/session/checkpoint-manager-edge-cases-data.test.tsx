import { beforeEach, describe, expect, it } from 'vitest';

import { type Checkpoint } from '../../stores/session-store';
import { mockCheckpoint, setupMockSessionStore } from './test-utils';

describe('CheckpointManager - Edge Cases - Checkpoint Data Validation', () => {
  beforeEach(() => {
    setupMockSessionStore();
  });

  it('should handle malformed checkpoint data', () => {
    const invalidCheckpoint = null;

    expect(isValidCheckpoint(invalidCheckpoint)).toBe(false);
    expect(isValidCheckpoint(mockCheckpoint)).toBe(true);
  });

  it('should handle undefined checkpoint data', () => {
    const undefinedCheckpoint = undefined;

    expect(isValidCheckpoint(undefinedCheckpoint)).toBe(false);
  });

  it('should handle empty object checkpoint data', () => {
    const emptyObject = {};

    expect(isValidCheckpoint(emptyObject)).toBe(false);
  });

  it('should handle checkpoint with missing required fields', () => {
    const incompleteCheckpoint = {
      id: 'cp1',
      name: 'Incomplete Checkpoint'
      // Missing other required fields
    };

    expect(isValidCheckpoint(incompleteCheckpoint)).toBe(false);
  });

  it('should handle checkpoint with wrong field types', () => {
    const wrongTypeCheckpoint = {
      id: 123, // Should be string
      name: 'Test Checkpoint',
      sessionId: 'session-123',
      createdAt: '2023-12-01T10:00:00Z',
      compressedSize: '512KB', // Should be number
      uncompressedSize: 1024 * 1024
    };

    expect(isValidCheckpoint(wrongTypeCheckpoint)).toBe(false);
  });
});

describe('CheckpointManager - Edge Cases - Missing Optional Fields', () => {
  beforeEach(() => {
    setupMockSessionStore();
  });

  it('should handle missing optional checkpoint fields', () => {
    const minimalCheckpoint: Partial<Checkpoint> = {
      id: 'cp1',
      sessionId: 'session-123',
      name: 'Minimal Checkpoint',
      createdAt: '2023-12-01T10:00:00Z',
      compressedSize: 512 * 1024,
      uncompressedSize: 1024 * 1024,
      tags: [],
      priority: 'medium',
      isAutoGenerated: false
    };

    // Test that required fields are present
    expect(minimalCheckpoint.id).toBe('cp1');
    expect(minimalCheckpoint.sessionId).toBe('session-123');
    expect(minimalCheckpoint.name).toBe('Minimal Checkpoint');
    expect(minimalCheckpoint.createdAt).toBe('2023-12-01T10:00:00Z');
    expect(minimalCheckpoint.compressedSize).toBe(512 * 1024);
    expect(minimalCheckpoint.uncompressedSize).toBe(1024 * 1024);
    expect(minimalCheckpoint.tags).toEqual([]);
    expect(minimalCheckpoint.priority).toBe('medium');
    expect(minimalCheckpoint.isAutoGenerated).toBe(false);

    // Test that optional fields are missing
    const hasDescription = !!minimalCheckpoint.description;
    const hasMetadata = !!minimalCheckpoint.metadata;
    const hasSession = !!minimalCheckpoint.session;

    expect(hasDescription).toBe(false);
    expect(hasMetadata).toBe(false);
    expect(hasSession).toBe(false);
  });
});

describe('CheckpointManager - Edge Cases - Null Optional Fields', () => {
  beforeEach(() => {
    setupMockSessionStore();
  });

  it('should handle checkpoint with null optional fields', () => {
    const checkpointWithNullOptional: Checkpoint = {
      ...mockCheckpoint,
      description: null as any,
      metadata: null as any,
      session: null as any
    };

    expect(checkpointWithNullOptional.description).toBeNull();
    expect(checkpointWithNullOptional.metadata).toBeNull();
    expect(checkpointWithNullOptional.session).toBeNull();
  });
});

describe('CheckpointManager - Edge Cases - Undefined Optional Fields', () => {
  beforeEach(() => {
    setupMockSessionStore();
  });

  it('should handle checkpoint with undefined optional fields', () => {
    const checkpointWithUndefinedOptional: Checkpoint = {
      ...mockCheckpoint,
      description: undefined,
      metadata: undefined,
      session: undefined
    };

    expect(checkpointWithUndefinedOptional.description).toBeUndefined();
    expect(checkpointWithUndefinedOptional.metadata).toBeUndefined();
    expect(checkpointWithUndefinedOptional.session).toBeUndefined();
  });
});

// Helper functions for validation
const hasRequiredFields = (checkpoint: unknown): boolean => {
  return !!(
    checkpoint &&
    typeof checkpoint === 'object' &&
    'id' in checkpoint &&
    'name' in checkpoint &&
    'sessionId' in checkpoint &&
    'createdAt' in checkpoint &&
    'compressedSize' in checkpoint &&
    'uncompressedSize' in checkpoint
  );
};

const hasCorrectFieldTypes = (checkpoint: any): boolean => {
  return !!(
    typeof checkpoint.id === 'string' &&
    typeof checkpoint.name === 'string' &&
    typeof checkpoint.sessionId === 'string' &&
    typeof checkpoint.createdAt === 'string' &&
    typeof checkpoint.compressedSize === 'number' &&
    typeof checkpoint.uncompressedSize === 'number'
  );
};

const isValidCheckpoint = (checkpoint: unknown): checkpoint is Checkpoint => {
  return hasRequiredFields(checkpoint) && hasCorrectFieldTypes(checkpoint as any);
};
