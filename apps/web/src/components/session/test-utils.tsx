import { type MockedFunction, vi } from 'vitest';

import { type Checkpoint, type Session, useSessionStore } from '../../stores/session-store';
import {
  AUTO_SAVE_INTERVAL,
  CHECKPOINT_FILTER_LIMIT,
  DEFAULT_CHECKPOINT_DESCRIPTION,
  DEFAULT_CHECKPOINT_ID,
  DEFAULT_CHECKPOINT_NAME,
  DEFAULT_SESSION_ID,
  DEFAULT_TIMESTAMP,
  DEFAULT_USER_ID,
  DEFAULT_WORKSPACE_ID,
  DEMO_TAG,
  SIZE_1_MB,
  SIZE_256_KB,
  SIZE_512_KB,
  TEST_TAG
} from './test-constants';

// Mock the session store
vi.mock('../../stores/session-store', () => ({
  useSessionStore: vi.fn(),
  Session: {},
  Checkpoint: {}
}));

// Mock child components
vi.mock('./checkpoint-form', () => ({
  CheckpointForm: vi.fn(({ onCheckpointCreated, onCancel }) => (
    <div data-testid="checkpoint-form">
      <button onClick={onCheckpointCreated}>Create</button>
      <button onClick={onCancel}>Cancel</button>
    </div>
  ))
}));

vi.mock('./checkpoint-list', () => ({
  CheckpointList: vi.fn(({ onCheckpointSelect, onCheckpointRestore }) => (
    <div data-testid="checkpoint-list">
      <button
        onClick={() =>
          onCheckpointSelect({
            id: DEFAULT_CHECKPOINT_ID,
            sessionId: DEFAULT_SESSION_ID,
            name: DEFAULT_CHECKPOINT_NAME,
            description: DEFAULT_CHECKPOINT_DESCRIPTION,
            createdAt: DEFAULT_TIMESTAMP,
            compressedSize: SIZE_512_KB,
            uncompressedSize: SIZE_1_MB,
            tags: [TEST_TAG, DEMO_TAG],
            priority: 'medium',
            isAutoGenerated: false,
            metadata: {}
          })
        }
      >
        Select
      </button>
      <button onClick={() => onCheckpointRestore(DEFAULT_CHECKPOINT_ID)}>Restore</button>
    </div>
  ))
}));

// Mock data
export const mockSession: Session = {
  id: DEFAULT_SESSION_ID,
  userId: DEFAULT_USER_ID,
  workspaceId: DEFAULT_WORKSPACE_ID,
  name: 'Test Session',
  isActive: true,
  lastSavedAt: DEFAULT_TIMESTAMP,
  createdAt: '2023-12-01T09:00:00Z',
  checkpointCount: 2,
  totalSize: SIZE_1_MB
};

export const mockCheckpoint: Checkpoint = {
  id: DEFAULT_CHECKPOINT_ID,
  sessionId: DEFAULT_SESSION_ID,
  name: DEFAULT_CHECKPOINT_NAME,
  description: DEFAULT_CHECKPOINT_DESCRIPTION,
  createdAt: DEFAULT_TIMESTAMP,
  compressedSize: SIZE_512_KB,
  uncompressedSize: SIZE_1_MB,
  tags: [TEST_TAG, DEMO_TAG],
  priority: 'medium',
  isAutoGenerated: false,
  metadata: {}
};

export const mockCheckpoints: Checkpoint[] = [
  mockCheckpoint,
  {
    ...mockCheckpoint,
    id: 'cp2',
    name: 'Another Checkpoint',
    createdAt: '2023-12-01T11:00:00Z',
    compressedSize: SIZE_256_KB
  }
];

/**
 * Handle checkpoint restore with confirmation
 * @param checkpointId - The ID of the checkpoint to restore
 * @param setViewChanged - Function to set view changed state
 * @returns Promise that resolves when restore operation completes
 */
export const handleCheckpointRestore = async (
  _checkpointId: string,
  setViewChanged: (changed: boolean) => void
): Promise<void> => {
  try {
    const confirmed = window.confirm(
      'Are you sure you want to restore from this checkpoint? Any unsaved changes will be lost.'
    );

    if (confirmed) {
      setViewChanged(true);
    }
  } catch {
    // Error handled silently in test
  }
};

/**
 * Check if a checkpoint object is valid
 * @param checkpoint - The object to validate as a checkpoint
 * @returns True if the object is a valid checkpoint, false otherwise
 */
export const isValidCheckpoint = (checkpoint: unknown): checkpoint is Checkpoint => {
  if (!checkpoint || typeof checkpoint !== 'object') {
    return false;
  }

  const checkpointObj = checkpoint as Record<string, unknown>;
  const requiredFields = [
    'id',
    'name',
    'sessionId',
    'createdAt',
    'compressedSize',
    'uncompressedSize'
  ];

  // Check if all required fields exist
  const hasAllFields = requiredFields.every(field => field in checkpointObj);
  if (!hasAllFields) {
    return false;
  }

  // Check field types
  return (
    typeof checkpointObj.id === 'string' &&
    typeof checkpointObj.name === 'string' &&
    typeof checkpointObj.sessionId === 'string' &&
    typeof checkpointObj.createdAt === 'string' &&
    typeof checkpointObj.compressedSize === 'number' &&
    typeof checkpointObj.uncompressedSize === 'number'
  );
};

/**
 * Get default session state values
 * @returns Default session state configuration
 */
const getDefaultSessionState = (): Partial<ReturnType<typeof useSessionStore>> => ({
  currentSession: mockSession,
  checkpoints: mockCheckpoints,
  workspaceState: null,
  isDirty: false,
  lastSaved: null,
  autoSaveEnabled: true,
  autoSaveInterval: AUTO_SAVE_INTERVAL,
  checkpointFilter: { limit: CHECKPOINT_FILTER_LIMIT, sortBy: 'createdAt', sortOrder: 'desc' },
  isLoadingCheckpoints: false,
  isCreatingCheckpoint: false,
  isRestoringCheckpoint: false
});

/**
 * Get default checkpoint form values
 * @returns Default checkpoint form configuration
 */
const getDefaultCheckpointForm = (): Partial<ReturnType<typeof useSessionStore>> => ({
  checkpointName: '',
  checkpointDescription: '',
  checkpointTags: [],
  checkpointPriority: 'medium'
});

/**
 * Get default mock functions for session store
 * @returns Mock functions for session store
 */
const getDefaultMockFunctions = (): Partial<ReturnType<typeof useSessionStore>> => ({
  setCurrentSession: vi.fn(),
  setWorkspaceState: vi.fn(),
  updateWorkspaceState: vi.fn(),
  setDirty: vi.fn(),
  setAutoSave: vi.fn(),
  createCheckpoint: vi.fn(),
  loadCheckpoints: vi.fn(),
  restoreCheckpoint: vi.fn(),
  deleteCheckpoint: vi.fn(),
  updateCheckpointMetadata: vi.fn(),
  saveSession: vi.fn(),
  restoreSession: vi.fn(),
  createNewSession: vi.fn(),
  startAutoSave: vi.fn(),
  stopAutoSave: vi.fn(),
  setCheckpointForm: vi.fn(),
  resetCheckpointForm: vi.fn(),
  clearSession: vi.fn()
});

/**
 * Get default session store values for testing
 * @returns Default session store configuration
 */
const getDefaultSessionStore = (): ReturnType<typeof useSessionStore> => {
  const sessionState = getDefaultSessionState();
  const checkpointForm = getDefaultCheckpointForm();
  const mockFunctions = getDefaultMockFunctions();

  return {
    ...sessionState,
    ...checkpointForm,
    ...mockFunctions
  };
};

/**
 * Setup mock session store with default values
 * @param overrides - Optional overrides for default store values
 * @returns Mocked session store function
 */
export const setupMockSessionStore = (
  overrides: Partial<ReturnType<typeof useSessionStore>> = {}
): MockedFunction<typeof useSessionStore> => {
  const mockUseSessionStore = useSessionStore as unknown as MockedFunction<typeof useSessionStore>;
  const defaultStore = getDefaultSessionStore();

  mockUseSessionStore.mockReturnValue(
    Object.assign({}, defaultStore, overrides) as ReturnType<typeof useSessionStore>
  );
  return mockUseSessionStore;
};

/**
 * Setup window confirm mock
 * @returns Mocked window confirm function
 */
export const setupWindowConfirmMock = (): MockedFunction<typeof window.confirm> => {
  Object.defineProperty(global, 'window', {
    value: {
      confirm: vi.fn()
    },
    writable: true
  });

  return window.confirm as MockedFunction<typeof window.confirm>;
};
