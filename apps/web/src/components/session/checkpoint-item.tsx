import React from 'react';

import { type Checkpoint } from '../../stores/session-store';
import { formatDate, formatSize, getPriorityColor, STROKE_WIDTH_DEFAULT } from './checkpoint-utils';

interface CheckpointItemProps {
  checkpoint: Checkpoint;
  isSelected: boolean;
  onSelect: (checkpoint: Checkpoint) => void;
  onRestore: (checkpointId: string) => void;
  onDelete: (checkpointId: string) => void;
}

/**
 * Event handlers for checkpoint item
 * @param {Checkpoint} checkpoint - Checkpoint data
 * @param {(checkpoint: Checkpoint) => void} onSelect - Select handler
 * @param {(checkpointId: string) => void} onRestore - Restore handler
 * @param {(checkpointId: string) => void} onDelete - Delete handler
 * @returns {{
 *   handleSelect: () => void;
 *   handleRestore: (e: React.MouseEvent) => void;
 *   handleDelete: (e: React.MouseEvent) => void;
 * }} Event handlers
 */
function useCheckpointHandlers(
  checkpoint: Checkpoint,
  onSelect: (checkpoint: Checkpoint) => void,
  onRestore: (checkpointId: string) => void,
  onDelete: (checkpointId: string) => void
): {
  handleSelect: () => void;
  handleRestore: (e: React.MouseEvent) => void;
  handleDelete: (e: React.MouseEvent) => void;
} {
  const handleRestore = (e: React.MouseEvent): void => {
    e.stopPropagation();
    onRestore(checkpoint.id);
  };

  const handleDelete = (e: React.MouseEvent): void => {
    e.stopPropagation();
    if (window.confirm('Are you sure you want to delete this checkpoint?')) {
      onDelete(checkpoint.id);
    }
  };

  const handleSelect = (): void => {
    onSelect(checkpoint);
  };

  return {
    handleSelect,
    handleRestore,
    handleDelete
  };
}

/**
 * Get container CSS classes
 * @param {boolean} isSelected - Whether checkpoint is selected
 * @returns {string} CSS classes
 */
function getContainerClasses(isSelected: boolean): string {
  return `border rounded-lg p-4 cursor-pointer transition-colors ${
    isSelected
      ? 'border-blue-500 bg-blue-50'
      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
  }`;
}

/**
 * Restore icon component
 * @returns {React.ReactElement} Restore icon
 */
function RestoreIcon(): React.ReactElement {
  return (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={STROKE_WIDTH_DEFAULT}
        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
      />
    </svg>
  );
}

/**
 * Delete icon component
 * @returns {React.ReactElement} Delete icon
 */
function DeleteIcon(): React.ReactElement {
  return (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={STROKE_WIDTH_DEFAULT}
        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
      />
    </svg>
  );
}

/**
 * Action buttons component
 * @param {object} props - Component props
 * @param {(e: React.MouseEvent) => void} props.onRestore - Restore button click handler
 * @param {(e: React.MouseEvent) => void} props.onDelete - Delete button click handler
 * @returns {React.ReactElement} Action buttons
 */
function ActionButtons({
  onRestore,
  onDelete
}: {
  onRestore: (e: React.MouseEvent) => void;
  onDelete: (e: React.MouseEvent) => void;
}): React.ReactElement {
  return (
    <div className="flex items-center space-x-2 ml-4">
      <button
        onClick={onRestore}
        className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100 rounded-md transition-colors"
        title="Restore from this checkpoint"
      >
        <RestoreIcon />
      </button>

      <button
        onClick={onDelete}
        className="p-2 text-red-600 hover:text-red-800 hover:bg-red-100 rounded-md transition-colors"
        title="Delete checkpoint"
      >
        <DeleteIcon />
      </button>
    </div>
  );
}

/**
 * Auto generated badge component
 * @returns {React.ReactElement} Auto generated badge
 */
function AutoGeneratedBadge(): React.ReactElement {
  return (
    <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600">
      Auto
    </span>
  );
}

/**
 * Priority badge component
 * @param {string} priority - Priority level
 * @returns {React.ReactElement} Priority badge
 */
function PriorityBadge({ priority }: { priority: string }): React.ReactElement {
  return (
    <span
      className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getPriorityColor(
        priority
      )}`}
    >
      {priority}
    </span>
  );
}

/**
 * Checkpoint title component
 * @param {object} props - Component props
 * @param {string} props.name - Checkpoint name
 * @param {string} props.priority - Priority level
 * @param {boolean} props.isAutoGenerated - Whether auto-generated
 * @returns {React.ReactElement} Checkpoint title
 */
function CheckpointTitle({
  name,
  priority,
  isAutoGenerated
}: {
  name: string;
  priority: string;
  isAutoGenerated: boolean;
}): React.ReactElement {
  return (
    <div className="flex items-center space-x-2">
      <h3 className="text-sm font-medium text-gray-900 truncate">{name}</h3>
      <PriorityBadge priority={priority} />
      {isAutoGenerated && <AutoGeneratedBadge />}
    </div>
  );
}

/**
 * Checkpoint description component
 * @param {string} description - Description text
 * @returns {React.ReactElement} Description
 */
function CheckpointDescription({ description }: { description: string }): React.ReactElement {
  return <p className="mt-1 text-sm text-gray-600 line-clamp-2">{description}</p>;
}

/**
 * Checkpoint metadata component
 * @param {object} props - Component props
 * @param {string} props.createdAt - Creation date
 * @param {number} props.compressedSize - Compressed size in bytes
 * @returns {React.ReactElement} Metadata
 */
function CheckpointMetadata({
  createdAt,
  compressedSize
}: {
  createdAt: string;
  compressedSize: number;
}): React.ReactElement {
  return (
    <div className="mt-2 flex items-center space-x-4 text-xs text-gray-500">
      <span>{formatDate(createdAt)}</span>
      <span>{formatSize(compressedSize)}</span>
      {compressedSize && <span>Compressed</span>}
    </div>
  );
}

/**
 * Checkpoint tags component
 * @param {string[]} tags - Tags array
 * @returns {React.ReactElement} Tags
 */
function CheckpointTags({ tags }: { tags: string[] }): React.ReactElement {
  return (
    <div className="mt-2 flex flex-wrap gap-1">
      {tags.map((tag, index) => (
        <span
          key={index}
          className="inline-flex items-center px-2 py-0.5 rounded text-xs bg-blue-100 text-blue-700"
        >
          {tag}
        </span>
      ))}
    </div>
  );
}

/**
 * Checkpoint content component
 * @param {Checkpoint} checkpoint - Checkpoint data
 * @returns {React.ReactElement} Checkpoint content
 */
function CheckpointContent({ checkpoint }: { checkpoint: Checkpoint }): React.ReactElement {
  return (
    <div className="flex-1 min-w-0">
      <CheckpointTitle
        name={checkpoint.name}
        priority={checkpoint.priority}
        isAutoGenerated={checkpoint.isAutoGenerated}
      />

      {checkpoint.description && <CheckpointDescription description={checkpoint.description} />}

      <CheckpointMetadata
        createdAt={checkpoint.createdAt}
        compressedSize={checkpoint.compressedSize}
      />

      {checkpoint.tags && checkpoint.tags.length > 0 && <CheckpointTags tags={checkpoint.tags} />}
    </div>
  );
}

/**
 * Checkpoint item component
 */
export const CheckpointItem: React.FC<CheckpointItemProps> = ({
  checkpoint,
  isSelected,
  onSelect,
  onRestore,
  onDelete
}) => {
  const { handleSelect, handleRestore, handleDelete } = useCheckpointHandlers(
    checkpoint,
    onSelect,
    onRestore,
    onDelete
  );

  const containerClasses = getContainerClasses(isSelected);

  return (
    <div className={containerClasses} onClick={handleSelect}>
      <div className="flex items-start justify-between">
        <CheckpointContent checkpoint={checkpoint} />
        <ActionButtons onRestore={handleRestore} onDelete={handleDelete} />
      </div>
    </div>
  );
};
