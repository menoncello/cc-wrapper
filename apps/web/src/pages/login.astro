---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Login - CC Wrapper">
  <main class="login-page">
    <div class="login-container">
      <header class="login-header">
        <h1>Welcome to CC Wrapper</h1>
        <p>Sign in to your account or create a new one</p>
      </header>

      <!-- Tab Navigation -->
      <div class="tab-container">
        <button class="tab-button active" data-tab="login">Login</button>
        <button class="tab-button" data-tab="register">Register</button>
      </div>

      <!-- Login Form -->
      <div id="loginTab" class="tab-content active">
        <form id="loginForm" class="auth-form">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required placeholder="Enter your email" />
          </div>

          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required placeholder="Enter your password" />
          </div>

          <button type="submit" class="auth-button">Login</button>
        </form>
      </div>

      <!-- Register Form -->
      <div id="registerTab" class="tab-content">
        <form id="registerForm" class="auth-form">
          <div class="form-group">
            <label for="regEmail">Email</label>
            <input type="email" id="regEmail" name="email" required placeholder="Enter your email" />
          </div>

          <div class="form-group">
            <label for="regPassword">Password</label>
            <input type="password" id="regPassword" name="password" required placeholder="Create a password" />
          </div>

          <button type="submit" class="auth-button">Register</button>
        </form>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  // Tab switching functionality
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const buttonElement = button as HTMLElement;
      const targetTab = buttonElement.dataset.tab;

      if (!targetTab) return;

      // Remove active class from all tabs and buttons
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));

      // Add active class to clicked button and corresponding content
      button.classList.add('active');
      const targetElement = document.getElementById(targetTab + 'Tab');
      if (targetElement) {
        targetElement.classList.add('active');
      }
    });
  });

  // Login form handler
  document.getElementById('loginForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const target = e.target as HTMLFormElement;
    const formData = new FormData(target);
    const email = formData.get('email');
    const password = formData.get('password');

    try {
      const response = await fetch('http://localhost:20001/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('auth_token', data.token);
        window.location.href = '/onboarding';
      } else {
        const error = await response.json();
        alert('Login failed: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      alert('Login failed: ' + errorMessage);
    }
  });

  // Register form handler
  document.getElementById('registerFormElement')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const target = e.target as HTMLFormElement;
    const formData = new FormData(target);
    const email = formData.get('email');
    const password = formData.get('password');

    try {
      const response = await fetch('http://localhost:20001/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('auth_token', data.token);
        window.location.href = '/onboarding';
      } else {
        const error = await response.json();
        alert('Registration failed: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      alert('Registration failed: ' + errorMessage);
    }
  });
</script>

<style>
  .login-page {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
  }

  .login-container {
    max-width: 450px;
    width: 100%;
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    padding: 2.5rem;
  }

  .login-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .login-header h1 {
    font-size: 2rem;
    color: #333;
    margin-bottom: 0.5rem;
  }

  .login-header p {
    color: #666;
    font-size: 1rem;
  }

  /* Tab Navigation */
  .tab-container {
    display: flex;
    margin-bottom: 2rem;
    border-bottom: 2px solid #f0f0f0;
  }

  .tab-button {
    flex: 1;
    padding: 1rem;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    color: #666;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tab-button:hover {
    color: #667eea;
    background: rgba(102, 126, 234, 0.05);
  }

  .tab-button.active {
    color: #667eea;
    border-bottom-color: #667eea;
    font-weight: 600;
  }

  /* Tab Content */
  .tab-content {
    display: none;
    animation: fadeIn 0.3s ease-in-out;
  }

  .tab-content.active {
    display: block;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Form Styles */
  .auth-form {
    margin-top: 1rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #333;
    font-weight: 500;
  }

  .form-group input {
    width: 100%;
    padding: 0.875rem;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-group input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .auth-button {
    width: 100%;
    padding: 0.875rem;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-top: 1rem;
  }

  .auth-button:hover {
    background: #5a67d8;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .auth-button:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
  }
</style>