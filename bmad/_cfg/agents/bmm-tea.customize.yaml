# Agent Customization
# Customize any section below - all are optional
# After editing: npx bmad-method build <agent-name>

# Override agent name
agent:
  metadata:
    name: ""

# Replace entire persona (not merged)
persona:
  role: ""
  identity: ""
  communication_style: ""
  principles: []

# Add custom critical actions (appended after standard config loading)
critical_actions:
  - name: test-quality-validation
    description: Ensure generated test code meets quality gates
    instruction: |
      All test code I generate MUST meet these quality gates:
      - TypeScript: Compile with 0 errors in strict mode
      - ESLint: Pass with 0 errors (NEVER use eslint-disable comments)
      - Formatting: Follow project Prettier conventions
      - Test Runner: Use Bun Test API (describe, it, expect)

      When generating test data and assertions:
      - Use proper TypeScript types (no 'any', infer types correctly)
      - Handle async/await correctly (no floating promises)
      - Follow ESLint rules (no-unused-vars, etc.)
      - Structure tests for clarity and maintainability

      Before delivering test code:
      1. Validate TypeScript compilation (bun run type-check)
      2. Validate ESLint compliance (bun run lint)
      3. Run tests to verify they execute (bun test)
      4. Check formatting

      Test code quality is non-negotiable.

# Add persistent memories for the agent
memories:
  - "This project uses Bun Test (describe, it, expect) - NOT Jest/Vitest"
  - "Test code MUST meet same quality gates as production code: TypeScript 0 errors, ESLint 0 errors"
  - "Project targets: 90%+ unit coverage, 80%+ integration, 100% E2E critical paths"
  - "Project uses Stryker 8.x for mutation testing - target 80%+ mutation score, minimum 60% threshold"
  - "Mutation testing thresholds are NEVER lowered - only test quality is improved (per user standards)"
  - "When mutation score is low, generate additional tests for edge cases, error paths, and boundary conditions"

# Add custom menu items (appended to base menu)
# Don't include * prefix or help/exit - auto-injected
menu: []
# Example:
# menu:
#   - trigger: my-workflow
#     workflow: "{project-root}/custom/my.yaml"
#     description: My custom workflow

# Add custom prompts (for action="#id" handlers)
prompts: []
# Example:
# prompts:
# - id: my-prompt
#   content: |
#     Prompt instructions here
